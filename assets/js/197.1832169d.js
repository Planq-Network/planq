(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{696:function(e,t,o){"use strict";o.r(t);var r=o(1),a=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"planq-contributor-guidelines"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#planq-contributor-guidelines"}},[e._v("#")]),e._v(" Planq Contributor Guidelines")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#general_procedure"}},[e._v("General Procedure")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#adr"}},[e._v("Architecture Decision Records (ADR)")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#forking"}},[e._v("Forking")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#dependencies"}},[e._v("Dependencies")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#protobuf"}},[e._v("Protobuf")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#dev_procedure"}},[e._v("Development Procedure")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#testing"}},[e._v("Testing")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#updating_doc"}},[e._v("Updating Documentation")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#braching_model_and_release"}},[e._v("Branching Model and Release")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#commit_messages"}},[e._v("Commit messages")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#pr_targeting"}},[e._v("PR Targeting")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#pull_requests"}},[e._v("Pull Requests")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#reviewing_prs"}},[e._v("Process for reviewing PRs")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#pull_merge_procedure"}},[e._v("Pull Merge Procedure")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#release_procedure"}},[e._v("Release Procedure")])])])])]),e._v(" "),t("h2",{attrs:{id:"general-procedure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#general-procedure"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"general_procedure"}},[e._v("General Procedure")])]),e._v(" "),t("p",[e._v("Thank you for considering making contributions to Planq and related repositories!")]),e._v(" "),t("p",[e._v("Planq uses "),t("a",{attrs:{href:"https://github.com/tendermint/coding",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tendermint’s coding repo"),t("OutboundLink")],1),e._v(" for overall information on repository\nworkflow and standards.")]),e._v(" "),t("p",[e._v("Contributing to this repo can mean many things such as participating in discussion or proposing code changes. To ensure\na smooth workflow for all contributors, the following general procedure for contributing has been established:")]),e._v(" "),t("ol",[t("li",[e._v("Either "),t("a",{attrs:{href:"https://github.com/planq-network/planq/issues/new/choose",target:"_blank",rel:"noopener noreferrer"}},[e._v("open"),t("OutboundLink")],1),e._v("\nor "),t("a",{attrs:{href:"https://github.com/planq-network/planq/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("find"),t("OutboundLink")],1),e._v(" an issue you have identified and would like to contribute to\nresolving.")]),e._v(" "),t("li",[e._v("Participate in thoughtful discussion on that issue.")]),e._v(" "),t("li",[e._v("If you would like to contribute:\n"),t("ol",[t("li",[e._v("If the issue is a proposal, ensure that the proposal has been accepted by the Planq team.")]),e._v(" "),t("li",[e._v("Ensure that nobody else has already begun working on the same issue. If someone already has, please make sure to\ncontact the individual to collaborate.")]),e._v(" "),t("li",[e._v("If nobody has been assigned the issue and you would like to work on it, make a comment on the issue to inform the\ncommunity of your intentions to begin work. Ideally, wait for confirmation that no one has started it. However,\nif you are eager and do not get a prompt response, feel free to dive on in!")]),e._v(" "),t("li",[e._v("Follow standard Github best practices:\n"),t("ol",[t("li",[e._v("Fork the repo")]),e._v(" "),t("li",[e._v("Branch from the HEAD of "),t("code",[e._v("development")]),e._v("(For core developers working within the Planq repo, to ensure a\nclear ownership of branches, branches must be named with the convention "),t("code",[e._v("{moniker}/{issue#}-branch-name")]),e._v(").")]),e._v(" "),t("li",[e._v("Make commits")]),e._v(" "),t("li",[e._v("Submit a PR to "),t("code",[e._v("development")])])])]),e._v(" "),t("li",[e._v("Be sure to submit the PR in "),t("code",[e._v("Draft")]),e._v(" mode. Submit your PR early, even if it's incomplete as this indicates to the\ncommunity you're working on something and allows them to provide comments early in the development process.")]),e._v(" "),t("li",[e._v("When the code is complete it can be marked "),t("code",[e._v("Ready for Review")]),e._v(".")]),e._v(" "),t("li",[e._v("Be sure to include a relevant change log entry in the "),t("code",[e._v("Unreleased")]),e._v(" section of "),t("code",[e._v("CHANGELOG.md")]),e._v(" (see file for log\nformat).")]),e._v(" "),t("li",[e._v("Please make sure to run "),t("code",[e._v("make format")]),e._v(" before every commit - the easiest way to do this is having your editor run\nit for you upon saving a file. Additionally, please ensure that your code is lint compliant by running "),t("code",[e._v("make lint")]),e._v("\n. There are CI tests built into the Planq repository and all PR’s will require that these tests pass before\nthey are able to be merged.")])])])]),e._v(" "),t("p",[t("strong",[e._v("Note")]),e._v(": for very small or blatantly obvious problems (such as typos), it is not required to open an issue to submit a\nPR, but be aware that for more complex problems/features, if a PR is opened before an adequate design discussion has\ntaken place in a github issue, that PR runs a high likelihood of being rejected.")]),e._v(" "),t("p",[e._v("Looking for a good place to start contributing? How about checking out\nsome "),t("a",{attrs:{href:"https://github.com/planq-network/planq/issues?q=label%3A%22good+first+issue%22",target:"_blank",rel:"noopener noreferrer"}},[e._v("good first issues"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"architecture-decision-records-adr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#architecture-decision-records-adr"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"adr"}},[e._v("Architecture Decision Records (ADR)")])]),e._v(" "),t("p",[e._v("When proposing an architecture decision for Planq, please create\nan "),t("a",{attrs:{href:"https://github.com/planq-network/planq/blob/main/docs/architecture/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("ADR"),t("OutboundLink")],1),e._v(" so further discussions can be\nmade. We are following this process so all involved parties are in agreement before any party begins coding the proposed\nimplementation. If you would like to see some examples of how these are written refer\nto "),t("a",{attrs:{href:"https://github.com/cometbft/cometbft/tree/master/docs/architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tendermint ADRs"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"forking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#forking"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"forking"}},[e._v("Forking")])]),e._v(" "),t("p",[e._v("Please note that Go requires code to live under absolute paths, which complicates forking. While my fork lives\nat "),t("code",[e._v("https://github.com/planq-network/planq")]),e._v(", the code should never exist\nat "),t("code",[e._v("$GOPATH/src/github.com/planq-network/planq")]),e._v(". Instead, we use "),t("code",[e._v("git remote")]),e._v(" to add the fork as a new remote for the\noriginal repo,"),t("code",[e._v("$GOPATH/src/github.com/planq-network/planq")]),e._v(", and do all the work there.")]),e._v(" "),t("p",[e._v("For instance, to create a fork and work on a branch of it, you would:")]),e._v(" "),t("ol",[t("li",[e._v("Create the fork on github, using the fork button.")]),e._v(" "),t("li",[e._v("Go to the original repo checked out locally. (i.e. "),t("code",[e._v("$GOPATH/src/github.com/planq-network/planq")]),e._v(")")]),e._v(" "),t("li",[t("code",[e._v("git remote rename origin upstream")])]),e._v(" "),t("li",[t("code",[e._v("git remote add origin git@github.com:ivanshukhov/planq.git")])])]),e._v(" "),t("p",[e._v("Now "),t("code",[e._v("origin")]),e._v(" refers to my fork and "),t("code",[e._v("upstream")]),e._v(" refers to the  version. So I can "),t("code",[e._v("git push -u origin master")]),e._v(" to\nupdate my fork, and make pull requests to  from there. Of course, replace "),t("code",[e._v("ivanshukhov")]),e._v(" with your git handle.")]),e._v(" "),t("p",[e._v("To pull in updates from the origin repo, run:")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("git fetch upstream")])]),e._v(" "),t("li",[t("code",[e._v("git rebase upstream/master")]),e._v(" (or whatever branch you want)")])]),e._v(" "),t("p",[e._v("New branch should be rebased before submitting a PR in case there have been changes to avoid merge commits.")]),e._v(" "),t("p",[e._v("i.e. this branch state:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"",base64:"ICAgICAgICAgIEEtLS1CLS0tQyBuZXctYnJhbmNoCiAgICAgICAgIC8KICAgIEQtLS1FLS0tRi0tLUcgdGFyZ2V0LWJyYW5jaAogICAgICAgICAgICB8ICAgfAogICAgICAgICAoRiwgRykgY2hhbmdlcyBoYXBwZW5lZCBhZnRlciBgbmV3LWJyYW5jaGAgZm9ya2VkCg=="}}),e._v(" "),t("p",[e._v("should become this after rebase:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"",base64:"ICAgICAgICAgICAgICAgICAgQSctLUInLS1DJyBuZXctYnJhbmNoCiAgICAgICAgICAgICAgICAgLwogICAgRC0tLUUtLS1GLS0tRyB0YXJnZXQtYnJhbmNoCg=="}}),e._v(" "),t("p",[e._v("More about rebase "),t("a",{attrs:{href:"https://git-scm.com/docs/git-rebase",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1),e._v(" and "),t("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase#:~:text=What%20is%20git%20rebase%3F,of%20a%20feature%20branching%20workflow.",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("Please "),t("strong",[e._v("NO DOT")]),e._v(" make Pull Requests from "),t("code",[e._v("development")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"dependencies"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dependencies"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"dependencies"}},[e._v("Dependencies")])]),e._v(" "),t("p",[e._v("We use "),t("a",{attrs:{href:"https://github.com/golang/go/wiki/Modules",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go Modules"),t("OutboundLink")],1),e._v(" to manage dependency versions.")]),e._v(" "),t("p",[e._v("The master branch of every Cosmos repository should just build with "),t("code",[e._v("go get")]),e._v(", which means they should be kept up-to-date\nwith their dependencies, so we can get away with telling people they can just "),t("code",[e._v("go get")]),e._v(" our software.")]),e._v(" "),t("p",[e._v("Since some dependencies are not under our control, a third party may break our build, in which case we can fall back\non "),t("code",[e._v("go mod tidy -v")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"protobuf"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#protobuf"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"protobuf"}},[e._v("Protobuf")])]),e._v(" "),t("p",[e._v("We use "),t("a",{attrs:{href:"https://developers.google.com/protocol-buffers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Protocol Buffers"),t("OutboundLink")],1),e._v(" along\nwith "),t("a",{attrs:{href:"https://github.com/gogo/protobuf",target:"_blank",rel:"noopener noreferrer"}},[e._v("gogoproto"),t("OutboundLink")],1),e._v(" to generate code for use in Planq.")]),e._v(" "),t("p",[e._v("For deterministic behavior around Protobuf tooling, everything is containerized using Docker. Make sure to have Docker\ninstalled on your machine, or head to "),t("a",{attrs:{href:"https://docs.docker.com/get-docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker's website"),t("OutboundLink")],1),e._v(" to install it.")]),e._v(" "),t("p",[e._v("For formatting code in "),t("code",[e._v(".proto")]),e._v(" files, you can run "),t("code",[e._v("make proto-format")]),e._v(" command.")]),e._v(" "),t("p",[e._v("For linting and checking breaking changes, we use "),t("a",{attrs:{href:"https://buf.build/",target:"_blank",rel:"noopener noreferrer"}},[e._v("buf"),t("OutboundLink")],1),e._v(". You can use the commands "),t("code",[e._v("make proto-lint")]),e._v("\nand "),t("code",[e._v("make proto-check-breaking")]),e._v(" to respectively lint your proto files and check for breaking changes.")]),e._v(" "),t("p",[e._v("To generate the protobuf stubs, you can run "),t("code",[e._v("make proto-gen")]),e._v(".")]),e._v(" "),t("p",[e._v("We also added the "),t("code",[e._v("make proto-all")]),e._v(" command to run all the above commands sequentially.")]),e._v(" "),t("p",[e._v("In order for imports to properly compile in your IDE, you may need to manually set your protobuf path in your IDE's\nworkspace "),t("code",[e._v("settings/config")]),e._v(".")]),e._v(" "),t("p",[e._v("For example, in vscode your "),t("code",[e._v(".vscode/settings.json")]),e._v(" should look like:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"json",base64:"ewogICZxdW90O3Byb3RvYyZxdW90OzogewogICAgJnF1b3Q7b3B0aW9ucyZxdW90OzogWwogICAgICAmcXVvdDstLXByb3RvX3BhdGg9JHt3b3Jrc3BhY2VSb290fS9wcm90byZxdW90OywKICAgICAgJnF1b3Q7LS1wcm90b19wYXRoPSR7d29ya3NwYWNlUm9vdH0vdGhpcmRfcGFydHkvcHJvdG8mcXVvdDsKICAgIF0KICB9Cn0K"}}),e._v(" "),t("h2",{attrs:{id:"development-procedure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#development-procedure"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"dev_procedure"}},[e._v("Development Procedure")])]),e._v(" "),t("ol",[t("li",[e._v("The latest state of development is on "),t("code",[e._v("development")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("development")]),e._v(" must never\nfail "),t("code",[e._v("make lint, make test, make test-race, make test-rpc, make test-import")])]),e._v(" "),t("li",[e._v("No "),t("code",[e._v("--force")]),e._v(" onto "),t("code",[e._v("development")]),e._v(" (except when reverting a broken commit, which should seldom happen).")]),e._v(" "),t("li",[e._v("Create your feature branch from "),t("code",[e._v("development")]),e._v(" either on "),t("code",[e._v("github.com/planq-network/planq")]),e._v(", or your fork (\nusing "),t("code",[e._v("git remote add origin")]),e._v(").")]),e._v(" "),t("li",[e._v("Before submitting a pull request, begin "),t("code",[e._v("git rebase")]),e._v(" on top of "),t("code",[e._v("development")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"testing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#testing"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"testing"}},[e._v("Testing")])]),e._v(" "),t("p",[e._v("Planq uses "),t("a",{attrs:{href:"https://github.com/features/actions",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub Actions"),t("OutboundLink")],1),e._v(" for automated testing.")]),e._v(" "),t("h2",{attrs:{id:"updating-documentation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#updating-documentation"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"updating_doc"}},[e._v("Updating Documentation")])]),e._v(" "),t("p",[e._v("If you open a PR on the Planq repo, it is mandatory to update the relevant documentation in "),t("code",[e._v("/docs")]),e._v(". Please refer to\nthe docs subdirectory and make changes accordingly. Prior to approval, the Code owners/approvers may request some\nupdates to specific docs.")]),e._v(" "),t("h2",{attrs:{id:"branching-model-and-release"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#branching-model-and-release"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"braching_model_and_release"}},[e._v("Branching Model and Release")])]),e._v(" "),t("p",[e._v("User-facing repos should adhere to the "),t("a",{attrs:{href:"https://trunkbaseddevelopment.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("trunk based development branching model"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("Libraries need not follow the model strictly, but would be wise to.")]),e._v(" "),t("p",[e._v("Planq utilizes "),t("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic versioning"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"commit-messages"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commit-messages"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"commit_messages"}},[e._v("Commit messages")])]),e._v(" "),t("p",[e._v("Commit messages should be written in a short, descriptive manner and be prefixed with tags for the change type and scope (if possible) according to the "),t("a",{attrs:{href:"https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic commit"),t("OutboundLink")],1),e._v(" scheme.")]),e._v(" "),t("p",[e._v("For example, a new change to the "),t("code",[e._v("bank")]),e._v(" module might have the following message: "),t("code",[e._v("feat(bank): add balance query cli command")])]),e._v(" "),t("h3",{attrs:{id:"pr-targeting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pr-targeting"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"pr_targeting"}},[e._v("PR Targeting")])]),e._v(" "),t("p",[e._v("Ensure that you base and target your PR on the "),t("code",[e._v("development")]),e._v(" branch.")]),e._v(" "),t("p",[e._v("All feature additions should be targeted against "),t("code",[e._v("development")]),e._v(". Bug fixes for an outstanding release candidate should be\ntargeted against the release candidate branch.")]),e._v(" "),t("h3",{attrs:{id:"pull-requests"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pull-requests"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"pull_requests"}},[e._v("Pull Requests")])]),e._v(" "),t("p",[e._v("To accommodate the review process, we suggest that PRs are categorically broken up. Ideally each PR addresses only a\nsingle issue. Additionally, as much as possible code refactoring and cleanup should be submitted as separate PRs from\nbug fixes/feature-additions.")]),e._v(" "),t("h3",{attrs:{id:"process-for-reviewing-prs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#process-for-reviewing-prs"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"reviewing_prs"}},[e._v("Process for reviewing PRs")])]),e._v(" "),t("p",[e._v("All PRs require two Reviews before merge. When reviewing PRs, please use the following review explanations:")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("LGTM")]),e._v(" without an explicit approval means that the changes look good, but you haven't pulled down the code, run tests\nlocally and thoroughly reviewed it.")]),e._v(" "),t("li",[t("code",[e._v("Approval")]),e._v(" through the GH UI means that you understand the code, documentation/spec is updated in the right places,\nyou have pulled down and tested the code locally. In addition:\n"),t("ul",[t("li",[e._v("You must think through whether any added code could be partially combined (DRYed) with existing code.")]),e._v(" "),t("li",[e._v("You must think through any potential security issues or incentive-compatibility flaws introduced by the changes.")]),e._v(" "),t("li",[e._v("Naming convention must be consistent with the rest of the codebase.")]),e._v(" "),t("li",[e._v("Code must live in a reasonable location, considering dependency structures (e.g. not importing testing modules in\nproduction code, or including example code modules in production code).")]),e._v(" "),t("li",[e._v("If you approve of the PR, you are responsible for fixing any of the issues mentioned here.")])])]),e._v(" "),t("li",[e._v('If you are only making "surface level" reviews, submit any notes as '),t("code",[e._v("Comments")]),e._v(" without adding a review.")])]),e._v(" "),t("h3",{attrs:{id:"pull-merge-procedure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pull-merge-procedure"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"pull_merge_procedure"}},[e._v("Pull Merge Procedure")])]),e._v(" "),t("ol",[t("li",[e._v("Ensure pull branch is rebased on "),t("code",[e._v("development")]),e._v(".")]),e._v(" "),t("li",[e._v("Run "),t("code",[e._v("make test")]),e._v(" to ensure that all tests pass.")]),e._v(" "),t("li",[e._v("Squash merge pull request.")])]),e._v(" "),t("h3",{attrs:{id:"release-procedure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#release-procedure"}},[e._v("#")]),e._v(" "),t("span",{attrs:{id:"release_procedure"}},[e._v("Release Procedure")])]),e._v(" "),t("ol",[t("li",[e._v("Start on "),t("code",[e._v("development")]),e._v(".")]),e._v(" "),t("li",[e._v("Create the release candidate branch "),t("code",[e._v("rc/v*")]),e._v(" (going forward known as "),t("code",[e._v("RC")]),e._v(") and ensure it's protected against pushing\nfrom anyone except the release manager/coordinator. No PRs targeting this branch should be merged unless exceptional\ncircumstances arise.")]),e._v(" "),t("li",[e._v("On the "),t("code",[e._v("RC")]),e._v(" branch, prepare a new version section in the "),t("code",[e._v("CHANGELOG.md")]),e._v(". All links must be link-ified:\n"),t("code",[e._v("$ python ./scripts/linkify_changelog.py CHANGELOG.md")]),t("br"),e._v("\nCopy the entries into a "),t("code",[e._v("RELEASE_CHANGELOG.md")]),e._v(". This is needed so the bot knows which entries to add to the release\npage on github.")]),e._v(" "),t("li",[e._v("Kick off a large round of simulation testing (e.g. 400 seeds for 2k blocks).")]),e._v(" "),t("li",[e._v("If errors are found during the simulation testing, commit the fixes to "),t("code",[e._v("development")]),e._v(" and create a new "),t("code",[e._v("RC")]),e._v(" branch (\nmaking sure to increment the "),t("code",[e._v("rcN")]),e._v(").")]),e._v(" "),t("li",[e._v("After simulation has successfully completed, create the release branch ("),t("code",[e._v("release/vX.XX.X")]),e._v(") from the "),t("code",[e._v("RC")]),e._v(" branch.")]),e._v(" "),t("li",[e._v("Create a PR to "),t("code",[e._v("development")]),e._v(" to incorporate the "),t("code",[e._v("CHANGELOG.md")]),e._v(" updates.")]),e._v(" "),t("li",[e._v("Tag the release (use "),t("code",[e._v("git tag -a")]),e._v(") and create a release in Github.")]),e._v(" "),t("li",[e._v("Delete the "),t("code",[e._v("RC")]),e._v(" branches.")])]),e._v(" "),t("p",[t("strong",[e._v("Note")]),e._v(": Planq's team currently cuts releases on a need to have basis. We will announce a more\nstandardized release schedule as we near production readiness.")])],1)}),[],!1,null,null,null);t.default=a.exports}}]);