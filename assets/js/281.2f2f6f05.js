(window.webpackJsonp=window.webpackJsonp||[]).push([[281],{788:function(e,t,a){"use strict";a.r(t);var s=a(1),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"end-to-end-testing-suite"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#end-to-end-testing-suite"}},[e._v("#")]),e._v(" End-to-End Testing Suite")]),e._v(" "),t("p",[e._v("The End-to-End (E2E) testing suite provides an environment\nfor running end-to-end tests on Evmos.\nIt is used for testing chain upgrades,\nas it allows for initializing multiple Evmos chains with different versions.")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#end-to-end-testing-suite"}},[e._v("End-to-End Testing Suite")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#quick-start"}},[e._v("Quick Start")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#upgrade-process"}},[e._v("Upgrade Process")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#test-suite-structure"}},[e._v("Test Suite Structure")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#e2e-package"}},[t("code",[e._v("e2e")]),e._v(" Package")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#upgrade-package"}},[t("code",[e._v("upgrade")]),e._v(" Package")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#version-retrieve"}},[e._v("Version retrieve")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#testing-results"}},[e._v("Testing Results")])])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#running-multiple-upgrades"}},[e._v("Running multiple upgrades")])])])])]),e._v(" "),t("h3",{attrs:{id:"quick-start"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quick-start"}},[e._v("#")]),e._v(" Quick Start")]),e._v(" "),t("p",[e._v("To run the e2e tests, execute:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"shell",base64:"bWFrZSB0ZXN0LWUyZQo="}}),e._v(" "),t("p",[e._v("This command runs an upgrade test (upgrading a node from an old version to a newer one),\nas well as query and transactions operations against a node with the latest changes.")]),e._v(" "),t("p",[e._v("This logic utilizes parameters that can be set manually(if necessary):")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"shell",base64:"IyBmbGFnIHRvIHNraXAgY29udGFpbmVycyBjbGVhbnVwIGFmdGVyIHVwZ3JhZGUKIyBzaG91bGQgYmUgc2V0IHRydWUgd2l0aCBtYWtlIHRlc3QtZTJlIGNvbW1hbmQgaWYgeW91IG5lZWQgYWNjZXNzIHRvIHRoZSBub2RlCiMgYWZ0ZXIgdXBncmFkaW5nCkUyRV9TS0lQX0NMRUFOVVAgOj0gZmFsc2UKCiMgdmVyc2lvbihzKSBvZiBpbml0aWFsIGV2bW9zIG5vZGUocykgdGhhdCB3aWxsIGJlIHVwZ3JhZGVkLCB0YWcgZS5nLiAndjkuMS4wJwojIHRvIHVzZSBtdWx0aXBsZSB1cGdyYWRlcyBzZXBhcmF0ZSB0aGUgdmVyc2lvbnMgd2l0aCBhIGZvcndhcmQgc2xhc2gsIGUuZy4KIyAndjEwLjAuMS92MTEuMC4wLXJjMScKSU5JVElBTF9WRVJTSU9OCgojIHZlcnNpb24gb2YgdXBncmFkZWQgZXZtb3Mgbm9kZSB0aGF0IHdpbGwgcmVwbGFjZSB0aGUgaW5pdGlhbCBub2RlLCB0YWcgZS5nLgojICd2MTAuMC4wJwpUQVJHRVRfVkVSU0lPTgoKIyBtb3VudCBwb2ludCBmb3IgdGhlIHVwZ3JhZGVkIG5vZGUgY29udGFpbmVyLCB0byBtb3VudCBuZXcgbm9kZSB2ZXJzaW9uIHRvCiMgcHJldmlvdXMgbm9kZSBzdGF0ZSBmb2xkZXIuIEJ5IGRlZmF1bHQgdGhpcyBpcyAnLi9idWlsZC8uZXZtb3NkOi9yb290Ly5ldm1vc2QnCiMgTW9yZSBpbmZvIGF0IGh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2VuZ2luZS9yZWZlcmVuY2UvYnVpbGRlci8jdm9sdW1lCk1PVU5UX1BBVEgKCiMgJy0tY2hhaW4taWQnIGV2bW9zIGNsaSBwYXJhbWV0ZXIsIHVzZWQgdG8gc3RhcnQgbm9kZXMgd2l0aCBhIHNwZWNpZmljCiMgY2hhaW4taWQgYW5kIHN1Ym1pdCBwcm9wb3NhbHMKIyBCeSBkZWZhdWx0IHRoaXMgaXMgJ2V2bW9zXzkwMDAtMScKQ0hBSU5fSUQK"}}),e._v(" "),t("p",[e._v("To test an upgrade to explicit target version\nand continue to run the upgraded node, use:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"shell",base64:"bWFrZSB0ZXN0LWUyZSBFMkVfU0tJUF9DTEVBTlVQPXRydWUgSU5JVElBTF9WRVJTSU9OPSZsdDt0YWcmZ3Q7IFRBUkdFVF9WRVJTSU9OPSZsdDt0YWcmZ3Q7Cg=="}}),e._v(" "),t("h3",{attrs:{id:"upgrade-process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-process"}},[e._v("#")]),e._v(" Upgrade Process")]),e._v(" "),t("p",[e._v("Testing a chain upgrade is a multi-step process:")]),e._v(" "),t("ol",[t("li",[e._v("Build a docker image for the evmos target version\n(local repo by default, if no explicit "),t("code",[e._v("TARGET_VERSION")]),e._v(" provided as argument)\n(e.g. "),t("code",[e._v("v10.0.0")]),e._v(")")]),e._v(" "),t("li",[e._v("Run tests")]),e._v(" "),t("li",[e._v("The e2e test will first run an "),t("code",[e._v("INITIAL_VERSION")]),e._v(" node container.")]),e._v(" "),t("li",[e._v("The node will submit, deposit and vote for an upgrade proposal\nfor upgrading to the "),t("code",[e._v("TARGET_VERSION")]),e._v(".")]),e._v(" "),t("li",[e._v("After block "),t("code",[e._v("50")]),e._v(" is reached,\nthe test suite exports "),t("code",[e._v("/.evmosd")]),e._v(" folder from the docker container\nto the local "),t("code",[e._v("build/")]),e._v(" folder and then purges the container.")]),e._v(" "),t("li",[e._v("Suite will mount the node with "),t("code",[e._v("TARGET_VERSION")]),e._v("\nto the local "),t("code",[e._v("build/")]),e._v(" dir and start the node.\nThe node will get upgrade information from "),t("code",[e._v("upgrade-info.json")]),e._v("\nand will execute the upgrade.")])]),e._v(" "),t("h2",{attrs:{id:"test-suite-structure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#test-suite-structure"}},[e._v("#")]),e._v(" Test Suite Structure")]),e._v(" "),t("h3",{attrs:{id:"e2e-package"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#e2e-package"}},[e._v("#")]),e._v(" "),t("code",[e._v("e2e")]),e._v(" Package")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("e2e")]),e._v(" package defines an integration testing suite\nused for full end-to-end testing functionality.\nThis package is decoupled from depending on the Evmos codebase.\nIt initializes the chains for testing via Docker."),t("br"),e._v("\nAs a result, the test suite may provide the\ndesired Evmos version to Docker containers during the initialization.\nThis design allows for the opportunity of testing chain upgrades\nby providing an older Evmos version to the container,\nperforming the chain upgrade,\nand running the latest test suite."),t("br"),e._v("\nHere's an overview of the files:")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("e2e_suite_test.go")]),e._v(": defines the testing suite\nand contains the core bootstrapping logic\nthat creates a testing environment via Docker containers.\nA testing network is created dynamically with 2 test validators.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("e2e_test.go")]),e._v(": contains the actual end-to-end integration tests\nthat utilize the testing suite.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("e2e_utils_test.go")]),e._v(": contains suite upgrade params loading logic.")])])]),e._v(" "),t("h3",{attrs:{id:"upgrade-package"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-package"}},[e._v("#")]),e._v(" "),t("code",[e._v("upgrade")]),e._v(" Package")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("e2e")]),e._v(" package defines an upgrade "),t("code",[e._v("Manager")]),e._v(" abstraction.\nSuite will utilize "),t("code",[e._v("Manager")]),e._v("'s functions\nto run different versions of evmos containers,\npropose, vote, delegate and query nodes.")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("manager.go")]),e._v(": defines core manager logic for running containers,\nexport state and create networks.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("govexec.go")]),e._v(": defines "),t("code",[e._v("gov-specific")]),e._v(" exec commands to submit/delegate/vote\nthrough nodes "),t("code",[e._v("gov")]),e._v(" module.")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("node.go")]),e._v(": defines "),t("code",[e._v("Node")]),e._v(" structure\nresponsible for setting node container parameters before run.")])])]),e._v(" "),t("h3",{attrs:{id:"version-retrieve"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#version-retrieve"}},[e._v("#")]),e._v(" Version retrieve")]),e._v(" "),t("p",[e._v("If "),t("code",[e._v("INITIAL_VERSION")]),e._v(" is provided as an argument,\nnode container(s) with the corresponding version(s)\nwill be pulled from "),t("a",{attrs:{href:"https://hub.docker.com/r/tharsishq/evmos/tags",target:"_blank",rel:"noopener noreferrer"}},[e._v("DockerHub"),t("OutboundLink")],1),e._v(".\nIf it is not specified,\nthe test suite retrieves the second-to-last upgrade version\nfrom the local codebase (in the "),t("code",[e._v("evmos/app/upgrades")]),e._v(" folder)\naccording to "),t("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Semantic Versioning"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("If "),t("code",[e._v("TARGET_VERSION")]),e._v(" is specified,\nthe corresponding container will also be pulled from DockerHub.\nWhen not specified, the test suite will retrieve the latest upgrade version\nfrom "),t("code",[e._v("evmos/app/upgrades")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"testing-results"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#testing-results"}},[e._v("#")]),e._v(" Testing Results")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("make test-e2e")]),e._v(" script will output the test results\nfor each testing file.\nIn case of a successful upgrade,\nthe script will print the following output (example):")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"log",base64:"b2sgIAlnaXRodWIuY29tL3BsYW5xLW5ldHdvcmsvcGxhbnEvdGVzdHMvZTJlCTE3NC4xMzdzLgo="}}),e._v(" "),t("p",[e._v("If the target node version fails to start,\nthe logs from the docker container will be printed:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"log",base64:"RXJyb3I6ICBSZWNlaXZlZCB1bmV4cGVjdGVkIGVycm9yOgogICAgICAgIGNhbid0IHN0YXJ0IGV2bW9zIG5vZGUsIGNvbnRhaW5lciBleGl0IGNvZGU6IDIKCiAgICAgICAgW2Vycm9yIHN0cmVhbV06CgogICAgICAgIDc6MDNBTSBJTkYgVW5sb2NraW5nIGtleXJpbmcKICAgICAgICA3OjAzQU0gSU5GIHN0YXJ0aW5nIEFCQ0kgd2l0aCBUZW5kZXJtaW50CiAgICAgICAgcGFuaWM6IGludmFsaWQgbWluaW11bSBnYXMgcHJpY2VzOiBpbnZhbGlkIGRlY2ltYWwgY29pbiBleHByZXNzaW9uOiAwLi4uCgogICAgICAgIGdvcm91dGluZSAxIFtydW5uaW5nXToKICAgICAgICBnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL2Jhc2VhcHAuU2V0TWluR2FzUHJpY2VzKHsweGMwMDEzNTYzZTc/LCAuLi4KICAgICAgICAgICAgZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNka0B2MC40Ni41L2Jhc2VhcHAvb3B0aW9ucy5nbzoyOSArMHhkOQogICAgICAgIG1haW4uYXBwQ3JlYXRvci5uZXdBcHAoe3t7MHgzMzk5YjQwLCAweGMwMDBlYzFkYjh9LCB7MHgzM2FjMGY4LCAweGMwMC4uLgogICAgICAgICAgICBnaXRodWIuY29tL3BsYW5xLW5ldHdvcmsvcGxhbnEvY21kL2V2bW9zZC9yb290LmdvOjI0MyArMHgyY2EKICAgICAgICBnaXRodWIuY29tL3BsYW5xLW5ldHdvcmsvcGxhbnEvc2VydmVyLnN0YXJ0SW5Qcm9jZXNzKF8sIHt7MHgwLCAweDAsIDB4MH0sLi4uCiAgICAgICAgICAgIGdpdGh1Yi5jb20vcGxhbnEtbmV0d29yay9wbGFucUB2MC4yMC4wLXJjMi9zZXJ2ZXIvc3RhcnQuZ286MzA0ICsweDljNQogICAgICAgIGdpdGh1Yi5jb20vcGxhbnEtbmV0d29yay9wbGFucS9zZXJ2ZXIuU3RhcnRDbWQuZnVuYzIoMHhjMDAxNjIwNjAwPywgezB4YzAuLi4KICAgICAgICAgICAgZ2l0aHViLmNvbS9wbGFucS1uZXR3b3JrL3BsYW5xQHYwLjIwLjAtcmMyL3NlcnZlci9zdGFydC5nbzoxMjMgKzB4MWVjCiAgICAgICAgZ2l0aHViLmNvbS9zcGYxMy9jb2JyYS4oKkNvbW1hbmQpLmV4ZWN1dGUoMHhjMDAxNjIwNjAwLCB7MHhjMDAxNzQ1YmIwLi4uCiAgICAgICAgICAgIGdpdGh1Yi5jb20vc3BmMTMvY29icmFAdjEuNi4xL2NvbW1hbmQuZ286OTE2ICsweDg2MgogICAgICAgIGdpdGh1Yi5jb20vc3BmMTMvY29icmEuKCpDb21tYW5kKS5FeGVjdXRlQygweGMwMDE2MGUwMDApCiAgICAgICAgICAgIGdpdGh1Yi5jb20vc3BmMTMvY29icmFAdjEuNi4xL2NvbW1hbmQuZ286MTA0NCArMHgzYmQKICAgICAgICBnaXRodWIuY29tL3NwZjEzL2NvYnJhLigqQ29tbWFuZCkuRXhlY3V0ZSguLi4pCiAgICAgICAgICAgIGdpdGh1Yi5jb20vc3BmMTMvY29icmFAdjEuNi4xL2NvbW1hbmQuZ286OTY4CiAgICAgICAgZ2l0aHViLmNvbS9zcGYxMy9jb2JyYS4oKkNvbW1hbmQpLkV4ZWN1dGVDb250ZXh0KC4uLikKICAgICAgICAgICAgZ2l0aHViLmNvbS9zcGYxMy9jb2JyYUB2MS42LjEvY29tbWFuZC5nbzo5NjEKICAgICAgICBnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3NlcnZlci9jbWQuRXhlY3V0ZSgweDIxNzBkNTA/LCB7MHgyNmQ5NjEuLi4KICAgICAgICAgICAgZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNka0B2MC40Ni41L3NlcnZlci9jbWQvZXhlY3V0ZS5nbzozNiArMHguLi4KICAgICAgICBtYWluLm1haW4oKQogICAgICAgICAgICBnaXRodWIuY29tL3BsYW5xLW5ldHdvcmsvcGxhbnEvY21kL2V2bW9zZC9tYWluLmdvOjIwICsweDQ1CgoKICAgICAgICBbb3V0cHV0IHN0cmVhbV06CgpUZXN0OiAgICAgVGVzdEludGVncmF0aW9uVGVzdFN1aXRlL1Rlc3RVcGdyYWRlCk1lc3NhZ2VzOiBjYW4ndCBtb3VudCBhbmQgcnVuIHVwZ3JhZGVkIG5vZGUgY29udGFpbmVyCg=="}}),e._v(" "),t("p",[e._v("To get all containers run:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"shell",base64:"IyBsaXN0IGNvbnRhaW5lcnMKZG9ja2VyIHBzIC1hCg=="}}),e._v(" "),t("p",[e._v("Container names will be listed as follows:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"log",base64:"Q09OVEFJTkVSIElEICAgSU1BR0UKOTMwN2Y1NDg1MzIzICAgZXZtb3M6bG9jYWwgICAgJmx0Oy0tIHVwZ3JhZGVkIG5vZGUKZjQxYzk3ZDZjYTIxICAgZXZtb3M6djkuMC4wICAgJmx0Oy0tIGluaXRpYWwgbm9kZQo="}}),e._v(" "),t("p",[e._v("To access containers logs directly, run:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"shell",base64:"ZG9ja2VyIGxvZ3MgJmx0O2NvbnRhaW5lci1pZCZndDsK"}}),e._v(" "),t("p",[e._v("To interact with the upgraded node\npass "),t("code",[e._v("SKIP_CLEANUP=true")]),e._v(" to the make command\nand enter the container after the upgrade has finished:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"shell",base64:"ZG9ja2VyIGV4ZWMgLWl0ICZsdDtjb250YWluZXItaWQmZ3Q7IGJhc2gK"}}),e._v(" "),t("p",[e._v("If the cleanup was skipped\nthe upgraded node container should be removed manually:")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"shell",base64:"ZG9ja2VyIGtpbGwgJmx0O2NvbnRhaW5lci1pZCZndDsKZG9ja2VyIHJtICZsdDtjb250YWluZXItaWQmZ3Q7Cg=="}}),e._v(" "),t("h2",{attrs:{id:"running-multiple-upgrades"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#running-multiple-upgrades"}},[e._v("#")]),e._v(" Running multiple upgrades")]),e._v(" "),t("p",[e._v("In order to run multiple upgrades,\njust combine the versions leading up to the last upgrade\nwith a forward slash\nand pass them as the "),t("code",[e._v("INITIAL_VERSION")]),e._v(".")]),e._v(" "),t("tm-code-block",{staticClass:"codeblock",attrs:{language:"bash",base64:"bWFrZSB0ZXN0LWUyZSBJTklUSUFMX1ZFUlNJT049djEwLjAuMS92MTEuMC4wLXJjMSBUQVJHRVRfVkVSU0lPTj12MTEuMC4wLXJjMwo="}})],1)}),[],!1,null,null,null);t.default=n.exports}}]);